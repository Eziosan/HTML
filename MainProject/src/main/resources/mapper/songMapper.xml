<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- 인터페이스 위치 지정!!!!!! -->
<mapper namespace="music.is.mylife.dao.SongMapper">
	
		<!--  곡 아이디로 배너 사진 URL을 가져오는 SQL문 -->
	<select id="selectBanner" parameterType="int" resultType="string">
		select song_banner
		from song
		where song_id=#{song_id}
	</select> 
	
		<!--  곡 아이디로 앨범 사진 URL을 가져오는 SQL문  이것들 지워야함-->
	<select id="selectAlbumImg" parameterType="int" resultType="string">
		select album_img 
		from song 
		where song_id = #{song_id}
	</select> 
	
	
		 <!--	좋아요 수를 가져오는 SQL문 곡 명으로 가져올 생각임.-->
	 <select id="selectSongLike" parameterType="int" resultType="int">
		select song_like 
		from song 
		where song_id = #{song_id}
	</select>
	
 		<!-- 곡 아이디를 받아 곡명, 가수 이름, 국적, 앨범 이름, 앨범 날짜, 장르 가져오는 SQL문 -->
 		 <select id="selectSongOne" parameterType="int" resultType="song">
 			select so.song_id, so.singer_id, so.song_name, so.genre, so.song_like,so.hit,so.lyrics,so.song_banner, so.album_name,so.album_img
  				  , to_char(so.album_date, 'YYYY-MM-DD') as album_date ,so.writer,so.composer , si.singer_name, si.country, si.singer_like
            from song so, singer si
            where so.singer_id = si.singer_id and so.song_id=#{song_id} 	 
 		 </select>
	
	<!-- 유저가 가진 플레이 리스트 가져오기 -->
		<select id="selectList" parameterType="string" resultType="playlist">
			select * from playlist where user_id=#{user_id }
		</select>
		
		
		<!-- 시퀀스 하나 증가시키는 sql문 -->
		<!-- 리스트 추가할 때 먼저 selectListseq로 시퀀스 증가하고 int변수에 값 넣어두고 그 값으로 insertList 추가 동시에 detail에도 넣어줌 -->
		<select id="selectListSeq" resultType="int">
			select playlist_seq.nextval from dual
		</select>
		
		<!-- 리스트 추가하는 sql문 -->
		<insert id="insertList" parameterType="playlist" >
			insert into playlist(playlist_id,user_id,list_name,list_explain,list_like,list_date)
            values(#{playlist_id}, #{user_id}, #{list_name}, #{list_explain}, 0, sysdate)
		</insert>
		
		<!-- 리스트 디테일 추가하는 sql문 -->
		<!-- 처음 리스트를 만들때 사용 
			그리고 따로 곡 하나만 담을 때 도 이 sql문 사용. -->
		<insert id="insertList_Detail" parameterType="playlist">
			insert into playlist_detail(list_detail_id,playlist_id,song_id)
            values(playlist_detail_seq.nextval,#{playlist_id}, #{song_id})
		</insert>
		
		
		<!-- Playlist의 date를 최신날짜로 업데이트하는 sql문 -->
		<update id="updateList_Date" parameterType="int">
			update playlist set list_date = sysdate where playlist_id = #{playlist_id }
		</update>
	
		<select id="selectPlayListId" parameterType="string" resultType="int">
			select playlist_id from playlist where list_name=#{list_name}
		</select>
		
		<!-- playlist에 곡이 있는지 없는지 0, 1로 반환하는 sql문 -->
		<select id="selectSongCount" parameterType="int" resultType="int">
			select count(*) from playlist_detail where playlist_id = #{playlist_id} and song_id = #{song_id}
		</select>
		
		
		
		
		<!-- 곡에 별점이 있는지 없는지 반환하는 sql문 -->
		<select id="selectIsStars" parameterType="int" resultType="int">
			select count(star) from user_song_log where song_id=#{song_id}
		</select>
		
		<!-- 별점 불러오는 sql문 값이 없으면 에러뜸.-->
		<select id="selectStars" parameterType="int" resultType="double">
			select avg(star) from user_song_log where song_id = #{song_id}
		</select>
		
		
		<!-- 곡 id로 상위 4개의 리스트를 반환받는 sql문 -->
		<select id="selectTop4ListBySongId" parameterType="int" resultType="playlist">
			<![CDATA[  
			select * from (select pl.list_like, pld.song_id, pld.playlist_id
	        from playlist pl, playlist_detail pld
	        where pl.playlist_id = pld.playlist_id and pld.song_id=#{song_id}
	        order by list_like desc)
	        where rownum <= 4
	        ]]>
		</select>
	
	
	
	
	<!--[메인 페이지] 
		조회수가 높은 순으로 상위 5개의 곡 출력
		아이디: selectTopSong
		파라미터 타입: Song
		리턴 타입: ArrayList<Song>
		
		* 작거나 같다 <=  ->  lte/le
		* 부등호(< >) 사용 -> <![CDATA[ ]]> 문법 사용
	 -->
	<select id="selectTopSong" parameterType="song" resultType="song">
		<![CDATA[
	    	select * from (select singer.singer_id, singer.singer_name,
				song.song_id, song.song_name, song.album_name, to_char(song.album_date,'YYYY') as album_date, song.hit, song.album_img
			from singer singer, song song
			where singer.singer_id = song.singer_id
			order by song.hit desc) where rownum <= 7
    	]]>

	</select>
	
	
	<!--[메인 페이지] 
		좋아요가 높은 순으로 상위 5개 곡 출력
		아이디: selectLikeSong
		파라미터 타입: Song
		리턴 타입: ArrayList<Song>
	 -->
	<select id="selectSongByGenre" parameterType="string" resultType="song">
					select singer.singer_id, singer.singer_name,
				song.song_id, song.song_name, song.album_name, to_char(song.album_date,'YYYY') as album_date, song.hit, song.album_img
			from singer singer, song song
			where singer.singer_id = song.singer_id and song.genre = #{genre}
			order by hit desc
	</select>
	
	<!-- [메인 페이지] 
		전체 곡 검색
		아이디: selectAllSong
		파라미터 타입: song
		리턴 타입: Song-->
	<select id="selectAllSong" parameterType="song" resultType="song">
	select singer.singer_id, singer.singer_name, singer.country, singer.singer_like,
    	   song.song_id, song.song_name, song.song_like, song.hit, song.lyrics, song.song_banner, song.album_name, song.album_img,
    	   to_char(song.album_date, 'YYYYMMDD') as album_date, song.writer, song.composer, song.genre
	from singer singer, song song
	where singer.singer_id = song.singer_id
	and song.song_id = #{song_id}
	and singer.singer_id = #{singer_id}
	</select>
	
		<!--[검색 페이지] 
			1. 곡명으로 검색
			2. 가수명으로 검색
		-->
		<select id="selectSongsBySongName" parameterType="string" resultType="song">
			select singer.singer_id, singer.singer_name, song.song_id, song.song_name, song.album_name,
				   to_char(song.album_date,'YYYY') as album_date, song.album_img
			from singer singer, song song
			where singer.singer_id = song.singer_id and song.song_name like '%' || #{searchText} ||'%'
		</select>
		<select id="selectSongsBySingerName" parameterType="string" resultType="song">
			select singer.singer_id, singer.singer_name, song.song_id, song.song_name, song.album_name,
				   to_char(song.album_date,'YYYY') as album_date, song.album_img
			from singer singer, song song
			where singer.singer_id = song.singer_id and singer.singer_name like '%' || #{searchText} ||'%'
			
		</select>
		
	 
		<!-- 곡 아이디를 입력받아 좋아요 수를 증가 시키는 SQL문 -->
		<update id="plusSongLike" parameterType="int" >
			update song 
			set song_like = song_like +1 
			where song_id=#{song_id}
		</update>
		
		<!-- 곡 아이디를 입력받아 좋아요 수를 감소 시키는 SQL문 -->
		<update id="minusSongLike" parameterType="int" >
			update song 
			set song_like = song_like - 1 
			where song_id=#{song_id}
		</update>
 	
 	
 	

</mapper>